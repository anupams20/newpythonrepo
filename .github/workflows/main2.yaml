name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  SONAR_SCANNER_VERSION: "6.1.0.4477"
  SONAR_SCANNER_HOME: "${{ github.workspace }}/sonar-scanner"

jobs:
  # test:
  #   name: Test
  #   runs-on: self-hosted
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Set up Python 3.11
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11'
  #         cache: 'pip'
      
  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         virtualenvs-create: false
      
  #     - name: Cache Poetry dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.cache/pypoetry
  #         key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
      
  #     - name: Install dependencies
  #       run: |
  #         poetry install --no-interaction --no-ansi --no-root
  #     - name: Load environment variables from .env
  #       uses: falti/dotenv-action@v1
  #       with:
  #         path: .env
          
  #     - name: Run tests
  #       run: |
  #         poetry run pytest

  scan:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Download and install SonarQube Scanner
        run: |
          mkdir -p ${{ env.SONAR_SCANNER_HOME }}
          curl -L -o sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux-x64.zip
          unzip sonar-scanner-cli.zip -d ${{ env.SONAR_SCANNER_HOME }}
          echo "${{ env.SONAR_SCANNER_HOME }}/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux-x64/bin" >> $GITHUB_PATH
      
      - name: Run SonarQube Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          # Get PR number for pull request events
          PR_NUMBER=${{ github.event.pull_request.number }}
          
          if [ -n "$PR_NUMBER" ]; then
            # For pull requests
            sonar-scanner \
              -D"sonar.projectKey=${SONAR_PROJECT_KEY}" \
              -D"sonar.sources=." \
              -D"sonar.host.url=${SONAR_HOST_URL}" \
              -D"sonar.token=${SONAR_TOKEN}" \
              -D"sonar.analysis.branch=${GITHUB_HEAD_REF}" \
              -D"sonar.analysis.pullRequest=${PR_NUMBER}" \
              -D"sonar.buildString=${PR_NUMBER}" \
              -D"sonar.qualitygate.wait=false"
          else
            # For branch pushes
            sonar-scanner \
              -D"sonar.projectKey=${SONAR_PROJECT_KEY}" \
              -D"sonar.sources=." \
              -D"sonar.host.url=${SONAR_HOST_URL}" \
              -D"sonar.token=${SONAR_TOKEN}" \
              -D"sonar.analysis.branch=${GITHUB_REF_NAME}" \
              -D"sonar.buildString=${GITHUB_RUN_ID}" \
              -D"sonar.qualitygate.wait=false"
          fi
         
  docker-build-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    # needs: [test]
    # Only run on push to main branches, not on PRs
    # if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for backend
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/project-backend
          tags: |
            type=ref,event=branch
            type=sha,format=short
            latest
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./backend.dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/project-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/project-backend:buildcache,mode=max
      
      - name: Extract metadata (tags, labels) for worker
        id: meta-worker
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/project-worker
          tags: |
            type=ref,event=branch
            type=sha,format=short
            latest
      
      - name: Build and push worker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./celery_worker.dockerfile
          push: true
          tags: ${{ steps.meta-worker.outputs.tags }}
          labels: ${{ steps.meta-worker.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/project-worker:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/project-worker:buildcache,mode=max
